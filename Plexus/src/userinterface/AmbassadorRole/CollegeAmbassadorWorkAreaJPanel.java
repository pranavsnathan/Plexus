/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AmbassadorRole;

import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.GradStudent.GradStudent;

import Business.GradStudent.GradStudentDirectory;
import Business.Newbie.Newbie;
import Business.Newbie.NewbieDetailsDirectory;
import Business.Organization.Organization;
//import Business.Newbie.NewbieDetailsDirectory;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.awt.geom.Area;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.data.category.DefaultCategoryDataset;
import Business.Organization.AmbassadorOrganization;
import Business.Organization.GradStudentOrganization;
import Business.Organization.NewbieOrganization;
import Business.WorkQueue.LabTestWorkRequest;
import java.util.ArrayList;

import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Toolkit;

import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.swing.RowFilter;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author gaura
 */
public class CollegeAmbassadorWorkAreaJPanel extends javax.swing.JPanel {
    // private GradStudentDirectory gs;
    //private NewbieDetailsDirectory ns;

    private Enterprise enterprise;
    private Organization org;
    private Newbie newbie;
    private Employee emp;
    private AmbassadorOrganization ambassadorOrganization;
    private GradStudentOrganization gradStudentOrganization;
    private NewbieOrganization newbieOrganization;

    public CollegeAmbassadorWorkAreaJPanel(Enterprise enterprise, Organization organization) {
        initComponents();
        // this.gs=gs;
        // this.ns=ns;
        this.enterprise = enterprise;
        this.org = organization;
        this.newbie = newbie;
        this.emp = emp;
        //this.org=organization;
        //  this.gradStudentOrganization=(AmbassadorOrganization)organization;

        //populateTable();
        populateTable1();
        populateGradTbl();

    }

    /**
     * Creates new form CollegeAmbassadorWorkAreaJPanel
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradstudenttable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        newbiedetailstable = new javax.swing.JTable();
        chartBtn = new javax.swing.JButton();
        EthinicityCB = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        CurrentSem = new javax.swing.JComboBox<>();
        placeText = new javax.swing.JTextField();
        searchPlace = new javax.swing.JButton();
        sendNewbieBtn = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Graduate Student Details");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 230, 40));

        gradstudenttable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First name", "Last Name", "Course", "Current sem", "Courses taken 1", "Courses taken 2", "Ethinicity", "Email Address", "Place"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(gradstudenttable);
        if (gradstudenttable.getColumnModel().getColumnCount() > 0) {
            gradstudenttable.getColumnModel().getColumn(0).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(1).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(3).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(4).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(5).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(6).setResizable(false);
            gradstudenttable.getColumnModel().getColumn(7).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 920, 140));

        jLabel2.setText("Newbie Details");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 290, 220, -1));

        newbiedetailstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Major Accepted", "Ethinicity", "Email-ID", "Feeling"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(newbiedetailstable);
        if (newbiedetailstable.getColumnModel().getColumnCount() > 0) {
            newbiedetailstable.getColumnModel().getColumn(0).setResizable(false);
            newbiedetailstable.getColumnModel().getColumn(1).setResizable(false);
            newbiedetailstable.getColumnModel().getColumn(2).setResizable(false);
            newbiedetailstable.getColumnModel().getColumn(3).setResizable(false);
            newbiedetailstable.getColumnModel().getColumn(4).setResizable(false);
            newbiedetailstable.getColumnModel().getColumn(5).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 880, 120));

        chartBtn.setText("Chart");
        chartBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartBtnActionPerformed(evt);
            }
        });
        add(chartBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 560, 140, -1));

        EthinicityCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Indian", "Chinese", "American" }));
        EthinicityCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EthinicityCBActionPerformed(evt);
            }
        });
        add(EthinicityCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 260, -1, -1));

        jLabel3.setText("Search by Ethinicity:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        jLabel4.setText("Seach by Current Sem:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 260, -1, -1));

        CurrentSem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", " " }));
        CurrentSem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CurrentSemActionPerformed(evt);
            }
        });
        add(CurrentSem, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 260, 60, -1));
        add(placeText, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 260, 60, -1));

        searchPlace.setText("Search By Place");
        searchPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPlaceActionPerformed(evt);
            }
        });
        add(searchPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, -1));

        sendNewbieBtn.setText("Send To Newbie");
        sendNewbieBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendNewbieBtnActionPerformed(evt);
            }
        });
        add(sendNewbieBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 260, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    
  
    
    private void chartBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartBtnActionPerformed
        // TODO add your handling code here:

        Newbie newbie = null;

        DefaultCategoryDataset dcd = new DefaultCategoryDataset();

        ArrayList<String> feelingsList = new ArrayList<>();
        feelingsList.add("happy");
        feelingsList.add("Nervous");
        feelingsList.add("Depressed");
        feelingsList.add("Confused");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NewbieOrganization) {
                org = organization;
            }
        }
        for(String feelings: feelingsList){
            int feelingsCount=0;
        for (Newbie n : org.getNds().getNewbieDetailsList()) {
           if(n.getFeeling().equalsIgnoreCase(feelings)){
               feelingsCount++;
                dcd.addValue(feelingsCount, "Student", n.getFeeling());
           }
                
            }
        }

       
        JFreeChart chart = ChartFactory.createBarChart("Bar Chart", "Student", "Feeling", dcd);
        CategoryPlot plot = chart.getCategoryPlot();

        ChartFrame chrt = new ChartFrame("Trail", chart);
        chrt.setVisible(true);
        chrt.setSize(500, 400);


    }//GEN-LAST:event_chartBtnActionPerformed

    private void EthinicityCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EthinicityCBActionPerformed
        // TODO add your handling code here:

        String result = CurrentSem.getSelectedItem().toString();
        flightsearch(result);
    }//GEN-LAST:event_EthinicityCBActionPerformed

    private void CurrentSemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CurrentSemActionPerformed
        // TODO add your handling code here:
        
        String result = EthinicityCB.getSelectedItem().toString();
        flightsearch(result);
        
        
    }//GEN-LAST:event_CurrentSemActionPerformed

    private void searchPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPlaceActionPerformed
        // TODO add your handling code here:
        String place = placeText.getText();
         Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof GradStudentOrganization) {
                org = organization;
                DefaultTableModel dt1 = (DefaultTableModel) gradstudenttable.getModel();
                dt1.setRowCount(0);
                //org=(GradStudentOrganization)organization;
                for (GradStudent gs : org.getGsd().getGradStudentList()){
                    if(gs.getPlace().equalsIgnoreCase(place)){
                         Object row[] = new Object[10];
                    row[0] = gs;
                    row[1] = gs.getLName();
                    row[2] = gs.getCourse();
                    row[3] = gs.getCurrentSem();
                    row[4] = gs.getCoursetaken1();
                    row[5] = gs.getCoursetaken2();
                    row[6] = gs.getEthinicity();
                    row[7] = gs.getEmail();
                    row[8]= gs.getPlace();
                    dt1.addRow(row);
                        
                    }
                }
            }
        }
    }//GEN-LAST:event_searchPlaceActionPerformed

    private void sendNewbieBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendNewbieBtnActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = gradstudenttable.getSelectedRow();
         if (selectedRow < 0){
            return;
        }
        LabTestWorkRequest request = (LabTestWorkRequest)gradstudenttable.getValueAt(selectedRow, 0);
        //request.getMessage();
        //System.out.println(request.getMessage());
        request.getSender();
        org.getWorkQueue().getWorkRequestList().add(request);
        //userAccount.getWorkQueue().getWorkRequestList().add(request);

        
         
    }//GEN-LAST:event_sendNewbieBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CurrentSem;
    private javax.swing.JComboBox<String> EthinicityCB;
    private javax.swing.JButton chartBtn;
    private javax.swing.JTable gradstudenttable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable newbiedetailstable;
    private javax.swing.JTextField placeText;
    private javax.swing.JButton searchPlace;
    private javax.swing.JButton sendNewbieBtn;
    // End of variables declaration//GEN-END:variables

    /* private void populateTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
       DefaultTableModel dt =(DefaultTableModel) gradstudenttable.getModel();
       dt.setRowCount(0);
       
       for(GradStudent g:gs.getGradStudentList())
       {
           Object row[]=new Object[7];
           row[0]=g;
           row[1]=g.getFName();
           row[2]=g.getLName();
           row[3]=g.getCurrentSem();
           row[4]=g.getCoursetaken1();
           row[5]=g.getCoursetaken2();
           row[6]=g.getMajor();
           row[7]=g.getEthinicity();
           
           dt.addRow(row);
       }
    }
     */
    
    private void populateTable1() {
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NewbieOrganization) {
                org = organization;
                DefaultTableModel dt2 = (DefaultTableModel) newbiedetailstable.getModel();
                dt2.setRowCount(0);
                for (Newbie n : org.getNds().getNewbieDetailsList()) {
                    Object row[] = new Object[6];
                    row[0] = n;
                    row[1] = n.getLastName();
                    row[2] = n.getMajorAccepted();
                    row[3] = n.getEthinicity();
                    row[4] = n.getEmailID();
                    row[5] = n.getFeeling();
                    dt2.addRow(row);
                }
            }
        }
    }

    private void populateGradTbl() {

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof GradStudentOrganization) {
                org = organization;
                DefaultTableModel dt1 = (DefaultTableModel) gradstudenttable.getModel();
                dt1.setRowCount(0);
                //org=(GradStudentOrganization)organization;
                for (GradStudent gs : org.getGsd().getGradStudentList()) {
                    Object row[] = new Object[10];
                    row[0] = gs;
                    row[1] = gs.getLName();
                    row[2] = gs.getCourse();
                    row[3] = gs.getCurrentSem();
                    row[4] = gs.getCoursetaken1();
                    row[5] = gs.getCoursetaken2();
                    row[6] = gs.getEthinicity();
                    row[7] = gs.getEmail();
                    row[8] = gs.getPlace();
                    dt1.addRow(row);
                }
            }

        }
    }
private void flightsearch(String result)
    {
    DefaultTableModel table = (DefaultTableModel) gradstudenttable.getModel();
    TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table);
    gradstudenttable.setRowSorter(tr);
    if(result != "None")
    {
        tr.setRowFilter(RowFilter.regexFilter(result));
    }
    else
    {
        newbiedetailstable.setRowSorter(tr);
    }
    }
       
    
}
